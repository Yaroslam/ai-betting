#!/usr/bin/env python3
"""
Test script for HLTV Parser - Testing with Vitality team
"""

import asyncio
import sys
import os
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from hltv_parser import HLTVParser

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)


async def test_vitality():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥–µ Vitality"""
    parser = None
    try:
        parser = HLTVParser()
        
        logger.info("=" * 60)
        logger.info("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï HLTV PARSER - –ö–û–ú–ê–ù–î–ê VITALITY")
        logger.info("=" * 60)
        
        # –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥—ã
        logger.info("\n1. –ü–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥—ã Vitality...")
        team_id = await parser.find_team_by_name("vitality")
        if team_id:
            logger.info(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ –Ω–∞–π–¥–µ–Ω–∞! ID: {team_id}")
        else:
            logger.error("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ
        logger.info("\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ...")
        team_info = await parser.get_team_info("vitality")
        if team_info:
            logger.info("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—É—á–µ–Ω–∞:")
            logger.info(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {team_info.get('name', 'N/A')}")
            logger.info(f"   –°—Ç—Ä–∞–Ω–∞: {team_info.get('country', 'N/A')}")
            logger.info(f"   –†–µ–π—Ç–∏–Ω–≥: {team_info.get('ranking', 'N/A')}")
            logger.info(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤: {len(team_info.get('roster', []))}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–∞–≤
            roster = team_info.get('roster', [])
            if roster:
                logger.info("   –°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã:")
                for i, player in enumerate(roster, 1):
                    logger.info(f"     {i}. {player.get('nickname', 'N/A')} (ID: {player.get('player_id', 'N/A')})")
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ")
            return False
        
        # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∞—Ç—á–µ–π
        logger.info("\n3. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∞—Ç—á–µ–π...")
        recent_matches = await parser.get_recent_matches(team_id, limit=5)
        if recent_matches:
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –º–∞—Ç—á–µ–π: {len(recent_matches)}")
            for i, match in enumerate(recent_matches, 1):
                result_emoji = "üü¢" if match.get('result') == 'win' else "üî¥"
                logger.info(f"   {i}. {result_emoji} vs {match.get('opponent', 'N/A')} - {match.get('score', 'N/A')}")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏")
        
        # –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤ (—Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã—Ö 2-—Ö)
        logger.info("\n4. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤...")
        if roster:
            for i, player in enumerate(roster[:2], 1):
                logger.info(f"\n   4.{i}. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ {player.get('nickname', 'N/A')}...")
                
                await asyncio.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                
                player_stats = await parser.get_player_stats(player.get('player_id'))
                if player_stats:
                    logger.info(f"      ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:")
                    logger.info(f"         –ù–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è: {player_stats.get('real_name', 'N/A')}")
                    logger.info(f"         –°—Ç—Ä–∞–Ω–∞: {player_stats.get('country', 'N/A')}")
                    logger.info(f"         –í–æ–∑—Ä–∞—Å—Ç: {player_stats.get('age', 'N/A')}")
                    logger.info(f"         –†–µ–π—Ç–∏–Ω–≥ 2.0: {player_stats.get('rating_2_0', 'N/A')}")
                    logger.info(f"         K/D: {player_stats.get('kd_ratio', 'N/A')}")
                    logger.info(f"         ADR: {player_stats.get('adr', 'N/A')}")
                    logger.info(f"         KAST: {player_stats.get('kast', 'N/A')}%")
                    logger.info(f"         –•–µ–¥—à–æ—Ç—ã: {player_stats.get('headshot_percentage', 'N/A')}%")
                    logger.info(f"         –ö–∞—Ä—Ç —Å—ã–≥—Ä–∞–Ω–æ: {player_stats.get('maps_played', 'N/A')}")
                else:
                    logger.warning(f"      ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è {player.get('nickname', 'N/A')}")
        
        logger.info("\n" + "=" * 60)
        logger.info("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        logger.info("=" * 60)
        return True
        
    except Exception as e:
        logger.error(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False
        
    finally:
        if parser:
            await parser.close()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        success = await test_vitality()
        if success:
            logger.info("–ü–∞—Ä—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            sys.exit(0)
        else:
            logger.error("–ü–∞—Ä—Å–µ—Ä –Ω–µ –ø—Ä–æ—à–µ–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ!")
            sys.exit(1)
            
    except KeyboardInterrupt:
        logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main()) 