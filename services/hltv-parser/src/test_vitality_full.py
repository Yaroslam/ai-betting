#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ HLTV –¥–ª—è –∫–æ–º–∞–Ω–¥—ã Vitality –∏ –≤—Å–µ—Ö –µ—ë –∏–≥—Ä–æ–∫–æ–≤
"""

import sys
import os
import logging
import time
from typing import Dict, Any, List

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from hltv_parser_selenium import HLTVParserSelenium

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

# –î–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã Vitality
VITALITY_TEAM_ID = 9565
VITALITY_PLAYERS = [
    {"id": 7322, "nickname": "apEX"},
    {"id": 11816, "nickname": "ropz"},
    {"id": 11893, "nickname": "ZywOo"},
    {"id": 16693, "nickname": "flameZ"},
    {"id": 18462, "nickname": "mezii"}
]

def test_team_info(parser: HLTVParserSelenium) -> bool:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ"""
    try:
        logger.info("üèÜ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ö–û–ú–ê–ù–î–ï VITALITY")
        logger.info("=" * 60)
        
        team_info = parser.get_team_info(VITALITY_TEAM_ID)
        
        if not team_info:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ")
            return False
        
        logger.info("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—É—á–µ–Ω–∞:")
        logger.info(f"  –ù–∞–∑–≤–∞–Ω–∏–µ: {team_info.get('name', 'N/A')}")
        logger.info(f"  –°—Ç—Ä–∞–Ω–∞: {team_info.get('country', 'N/A')}")
        logger.info(f"  –†–µ–π—Ç–∏–Ω–≥: #{team_info.get('ranking', 'N/A')}")
        logger.info(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤: {team_info.get('player_count', 'N/A')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ['name', 'country']
        missing_fields = [field for field in required_fields if not team_info.get(field)]
        
        if missing_fields:
            logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}")
            return False
        
        logger.info("‚úÖ –¢–µ—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
        return False

def test_team_roster(parser: HLTVParserSelenium) -> bool:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–∞ –∫–æ–º–∞–Ω–¥—ã"""
    try:
        logger.info("\nüë• –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–°–¢–ê–í–ê –ö–û–ú–ê–ù–î–´ VITALITY")
        logger.info("=" * 60)
        
        roster = parser.get_team_roster(VITALITY_TEAM_ID)
        
        if not roster:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã")
            return False
        
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å–æ—Å—Ç–∞–≤–µ: {len(roster)}")
        
        for i, player in enumerate(roster, 1):
            logger.info(f"  {i}. {player.get('nickname', 'N/A')} (ID: {player.get('player_id', 'N/A')})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—à–ª–∏ —Ö–æ—Ç—è –±—ã 4 –∏–≥—Ä–æ–∫–æ–≤ (–æ–±—ã—á–Ω–æ –≤ –∫–æ–º–∞–Ω–¥–µ 5)
        if len(roster) < 4:
            logger.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –º–∞–ª–æ –∏–≥—Ä–æ–∫–æ–≤: {len(roster)} (–æ–∂–∏–¥–∞–µ—Ç—Å—è 5)")
            return False
        
        logger.info("‚úÖ –¢–µ—Å—Ç —Å–æ—Å—Ç–∞–≤–∞ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ—Å—Ç–∞–≤–∞: {e}")
        return False

def test_player_stats(parser: HLTVParserSelenium, player_data: Dict[str, Any]) -> bool:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞"""
    try:
        player_id = player_data["id"]
        nickname = player_data["nickname"]
        
        logger.info(f"\nüìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ò–ì–†–û–ö–ê {nickname.upper()}")
        logger.info("=" * 60)
        
        player_stats = parser.get_player_stats(player_id, nickname)
        
        if not player_stats:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞ {nickname}")
            return False
        
        logger.info(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ {nickname} –ø–æ–ª—É—á–µ–Ω–∞:")
        logger.info(f"  ID: {player_stats.get('player_id', 'N/A')}")
        logger.info(f"  –ù–∏–∫–Ω–µ–π–º: {player_stats.get('nickname', 'N/A')}")
        logger.info(f"  –ù–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è: {player_stats.get('real_name', 'N/A')}")
        logger.info(f"  –°—Ç—Ä–∞–Ω–∞: {player_stats.get('country', 'N/A')}")
        logger.info(f"  –í–æ–∑—Ä–∞—Å—Ç: {player_stats.get('age', 'N/A')}")
        logger.info("  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        logger.info(f"    Rating 2.0: {player_stats.get('rating_2_0', 'N/A')}")
        logger.info(f"    K/D: {player_stats.get('kd_ratio', 'N/A')}")
        logger.info(f"    ADR: {player_stats.get('adr', 'N/A')}")
        logger.info(f"    KAST: {player_stats.get('kast', 'N/A')}{'%' if player_stats.get('kast') else ''}")
        logger.info(f"    HS%: {player_stats.get('headshot_percentage', 'N/A')}{'%' if player_stats.get('headshot_percentage') else ''}")
        
        # –ü–æ–¥—Å—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
        stats_fields = ['rating_2_0', 'kd_ratio', 'adr', 'kast', 'headshot_percentage']
        found_stats = sum(1 for field in stats_fields if player_stats.get(field) is not None)
        
        logger.info(f"  üìà –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫: {found_stats}/{len(stats_fields)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        if not player_stats.get('nickname'):
            logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞ {nickname}")
            return False
        
        if found_stats == 0:
            logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ –¥–ª—è –∏–≥—Ä–æ–∫–∞ {nickname}")
            return False
        
        logger.info(f"‚úÖ –¢–µ—Å—Ç –∏–≥—Ä–æ–∫–∞ {nickname} –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞ {nickname}: {e}")
        return False

def run_full_test() -> bool:
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    parser = None
    try:
        logger.info("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø HLTV PARSER")
        logger.info("üéØ –ö–æ–º–∞–Ω–¥–∞: Team Vitality")
        logger.info("üë• –ò–≥—Ä–æ–∫–∏: apEX, ropz, ZywOo, flameZ, mezii")
        logger.info("=" * 80)
        
        parser = HLTVParserSelenium()
        
        # –¢–µ—Å—Ç 1: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ
        if not test_team_info(parser):
            logger.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –¢–µ—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ –ø—Ä–æ–≤–∞–ª–µ–Ω")
            return False
        
        # –¢–µ—Å—Ç 2: –°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã
        if not test_team_roster(parser):
            logger.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –¢–µ—Å—Ç —Å–æ—Å—Ç–∞–≤–∞ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–≤–∞–ª–µ–Ω")
            return False
        
        # –¢–µ—Å—Ç 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        successful_players = 0
        total_players = len(VITALITY_PLAYERS)
        
        for player in VITALITY_PLAYERS:
            if test_player_stats(parser, player):
                successful_players += 1
            else:
                logger.warning(f"‚ö†Ô∏è –ò–≥—Ä–æ–∫ {player['nickname']} –Ω–µ –ø—Ä–æ—à–µ–ª —Ç–µ—Å—Ç")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(2)
        
        # –û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        logger.info("\n" + "=" * 80)
        logger.info("üìã –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        logger.info("=" * 80)
        logger.info(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ: –£–°–ü–ï–®–ù–û")
        logger.info(f"‚úÖ –°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã: –£–°–ü–ï–®–ù–û")
        logger.info(f"üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤: {successful_players}/{total_players} —É—Å–ø–µ—à–Ω–æ")
        
        success_rate = (successful_players / total_players) * 100
        logger.info(f"üìä –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞
        if successful_players >= total_players * 0.8:  # 80% –∏–≥—Ä–æ–∫–æ–≤ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç
            logger.info("üéâ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            logger.info("‚úÖ –ü–∞—Ä—Å–µ—Ä –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
            return True
        else:
            logger.error("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ï –ü–†–û–ô–î–ï–ù–û!")
            logger.error(f"–¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º {total_players * 0.8:.0f} —É—Å–ø–µ—à–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ {total_players}")
            return False
        
    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False
        
    finally:
        if parser:
            parser.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        start_time = time.time()
        
        success = run_full_test()
        
        end_time = time.time()
        duration = end_time - start_time
        
        logger.info(f"\n‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞: {duration:.1f} —Å–µ–∫—É–Ω–¥")
        
        if success:
            logger.info("=" * 80)
            logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            logger.info("üöÄ –ü–ê–†–°–ï–† –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï!")
            logger.info("=" * 80)
            sys.exit(0)
        else:
            logger.error("=" * 80)
            logger.error("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–í–ê–õ–ï–ù–û!")
            logger.error("üîß –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê –ü–ê–†–°–ï–†–ê!")
            logger.error("=" * 80)
            sys.exit(1)
            
    except KeyboardInterrupt:
        logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 